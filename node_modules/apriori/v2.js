(function(root, factory) {
    if (typeof exports === 'object') {
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        define('apriori', [], factory);
    } else {
        root['Apriori'] = factory();
    }
}(this, function() {

    'use strict';
    var Apriori;
    var json2csv = require('json2csv');
    var _ = require('lodash');
    var Combinatorics = require('js-combinatorics');
    (function(Apriori) {
        var AnalysisResult = (function() {
            function AnalysisResult(frequentItemSets, associationRules) {
                this.frequentItemSets = frequentItemSets;
                this.associationRules = associationRules;
            }
            return AnalysisResult;
        })();
        Apriori.AnalysisResult = AnalysisResult;

        var FrequentItemSet = (function() {
            function FrequentItemSet(itemSet, support) {
                this.itemSet = itemSet;
                this.support = support;
            }
            return FrequentItemSet;
        })();
        Apriori.FrequentItemSet = FrequentItemSet;

        var AssociationRule = (function() {
            function AssociationRule(lhs, rhs, confidence) {
                this.lhs = lhs;
                this.rhs = rhs;
                this.confidence = confidence;
            }
            return AssociationRule;
        })();
        Apriori.AssociationRule = AssociationRule;

        var Algorithm = (function() {
            function Algorithm(minSupport, minConfidence, debugMode) {
                this.minSupport = minSupport ? minSupport === 0 ? 0 : minSupport : 0.15;
                this.minConfidence = minConfidence ? minConfidence === 0 ? 0 : minConfidence : 0.6;
                this.debugMode = debugMode || false;
            }
            Algorithm.prototype.analyze = function(transactions) {
                var self = this;
                var beforeMillis = new Date().getTime();

                var frequencies = {};
                var frequentItemSets = {};
                //get transactions.length , input to calcuted when clear transaction;
                var transactionsLenght = transactions.length;

                var oneElementItemSets = self.toOneElementItemSets(transactions);

                // console.log(oneElementItemSets, "toOneElementItemSets");
                var oneCItemSets = self.findItemSetsMinSupportSatisfied(oneElementItemSets, transactions, self.minSupport, frequencies,transactionsLenght);
                var currentLItemSets = oneCItemSets.filteredItemSets;
                var oneCItemSetsLowerSupport = oneCItemSets.filteredItemSetsLowerSupport;
                var itemSetSize = 1;
                //运行时间
                if (self.debugMode) {
                    var startTime = self.getTime(beforeMillis)
                    console.log('Before finding item sets: ' + self.getTime(beforeMillis) + ' ms');
                }

                ////delete column
                // var clearTransactions = transactions;
                console.log(oneCItemSets, oneCItemSetsLowerSupport, "========")
                var clearTransactions = ArrayUtils.removeOneItemFormTransactions(oneCItemSetsLowerSupport, transactions);
                console.log(transactions, clearTransactions, "-------------------s")
                var extractItemSet = function(f) {
                    return f.itemSet;
                };
                while (currentLItemSets.length !== 0) {
                    frequentItemSets[itemSetSize] = currentLItemSets;
                    var joinedSets = ArrayUtils.toFixedSizeJoinedSets(currentLItemSets.map(extractItemSet), itemSetSize + 1);
                    //remove 小数据
                    clearTransactions = ArrayUtils.removeRows(transactions, itemSetSize + 1);
                    var findResultItemSets = self.findItemSetsMinSupportSatisfied(joinedSets, clearTransactions, self.minSupport, frequencies, transactionsLenght);
                    currentLItemSets = findResultItemSets.filteredItemSets;
                    itemSetSize += 1;
                }
                if (self.debugMode) {
                    var endTime = self.getTime(beforeMillis)
                    console.log('After finding item sets: ' + self.getTime(beforeMillis) + ' ms');
                }
                return {
                    data: frequentItemSets,
                    startTime: startTime,
                    endTime: endTime
                };

            };

            Algorithm.prototype.toOneElementItemSets = function(transactions) {
                //transactions 初始化数据
                var nestedArrayOfItem = [];
                transactions.forEach(function(transaction) {
                    transaction.forEach(function(item) {
                        nestedArrayOfItem.push(new Array(item));
                    });
                });

                //nestedArrayOfItem 遍历执行所有的数据
                return ArrayUtils.toArraySet(nestedArrayOfItem);
            };

            //
            Algorithm.prototype.findItemSetsMinSupportSatisfied = function(itemSets, transactions, minSupport, frequencies, transactionsLenght) {
                console.log(transactionsLenght, 'transactionsLenght', 'fhsadjfadsjfsaldjf')
                var filteredItemSets = [],
                    localFrequencies = {};
                itemSets.forEach(function(itemSet) {
                    transactions.forEach(function(transaction) {
                        if (ArrayUtils.isSubSetArrayOf(itemSet, transaction)) {
                            if (!frequencies[itemSet.toString()])
                                frequencies[itemSet.toString()] = 0;
                            if (!localFrequencies[itemSet.toString()])
                                localFrequencies[itemSet.toString()] = 0;
                            frequencies[itemSet.toString()] += 1;
                            localFrequencies[itemSet.toString()] += 1;
                        } else { 

                        }
                    });
                });
                console.log(itemSets,"divideccs",  transactions, ' hello world', localFrequencies);

                var alreadyAdded = false;
                var setAsAlreadyAddedIfFound = function(f) {
                    if (!alreadyAdded)
                        alreadyAdded = f.itemSet.toString() === itemSet.toString();
                };

                var filteredItemSetsLowerSupport = [];
                for (var strItemSet in localFrequencies) {
                    var itemSet = strItemSet.split(',').sort(),
                        localCount = localFrequencies[itemSet.toString()],
                        support = localCount / transactionsLenght;
                    if (support >= minSupport) {
                        alreadyAdded = false;
                        //遍历起是否已经添加了，这说明在数组中可能会存在重复的数据，
                        filteredItemSets.forEach(setAsAlreadyAddedIfFound);
                        if (!alreadyAdded) {
                            filteredItemSets.push(new FrequentItemSet(itemSet, support));
                        }
                    } else {
                        filteredItemSetsLowerSupport.push(new FrequentItemSet(itemSet, support));
                    }
                }
                return {
                    filteredItemSets: filteredItemSets,
                    filteredItemSetsLowerSupport: filteredItemSetsLowerSupport
                };
            };

            Algorithm.prototype.showAnalysisResultFromFile = function(filename) {
                var self = this;
                require('fs').readFile(filename, 'utf8', function(err, data) {
                    if (err)
                        throw err;
                    var transactions = ArrayUtils.readCSVToArray(data, ',');
                    var analysisResult = self.analyze(transactions);
                    var formatResult = ArrayUtils.formatData(analysisResult.data);
                    var calcuTime = {
                        itemSet: analysisResult.startTime,
                        support: analysisResult.endTime
                    };
                    formatResult.unshift(calcuTime);
                    json2csv({
                        data: formatResult
                    }, function(err, csv) {
                        if (err) throw err;
                        require("fs").writeFile("support.csv", csv, function(err) {
                            if (err) throw err;
                        });
                    });
                });
            };

            Algorithm.prototype.getTime = function(initial) {
                return new Date().getTime() - initial;
            };
            return Algorithm;
        })();
        Apriori.Algorithm = Algorithm;

        var ArrayUtils = (function() {
            function ArrayUtils() {}
            ArrayUtils.formatData = function(data) {
                var resultData = [];
                for (var i = 0; i < 100; i++) {
                    if (data[i]) {
                        var innerArray = data[i];
                        for (var j = 0; j < innerArray.length; j++) {
                            resultData.push(innerArray[j]);
                        }
                    }
                }
                return resultData;
            }

            ArrayUtils.removeRows = function(transactions, itenSetsLength){
                var resultData = [];
                for(var i = 0 , len = transactions.length; i < len; i++){
                    if(transactions[i].length >= itenSetsLength){
                        resultData.push(transactions[i]);
                    }
                }
                return resultData;
            }
            ArrayUtils.removeOneItemFormTransactions = function(oneCItemSetsLowerSupport, transactions){
                //clear one item lower support from transactions
                var resultData = [];
                for (var i = 0, lenI = oneCItemSetsLowerSupport.length; i < lenI; i++) {
                    for (var j = 0, lenJ = transactions.length; j < lenJ; j++) {
                        //delete all oneCItemSetsLowerSupport form transactions
                        while (transactions[j].indexOf(oneCItemSetsLowerSupport[i].itemSet[0]) !== -1) {
                            transactions[j].splice(transactions[j].indexOf(oneCItemSetsLowerSupport[i].itemSet[0]), 1);
                        }
                        resultData.push(transactions[j]);
                    }
                };
                return resultData;
            }

            ArrayUtils.toStringSet = function(array) {
                var uniqueArray = [];
                array.forEach(function(e) {
                    if (uniqueArray.indexOf(e) === -1)
                        uniqueArray.push(e);
                });
                return uniqueArray;
            };
            ArrayUtils.toArraySet = function(arrayOfArray) {
                var foundElements = {},
                    uniqueArray = [];
                arrayOfArray.forEach(function(array) {
                    if (!foundElements.hasOwnProperty(array.toString())) {
                        uniqueArray.push(array);
                        foundElements[array.toString()] = true;
                    }
                });

                //在计算完一项式之后对其进行排序，
                if(uniqueArray.length !== 0 && uniqueArray[0].length === 1){
                    return uniqueArray.sort(function(a, b){
                        if(a[0] < b[0]){
                            return false;
                        }
                        return true;
                    });
                }
                return uniqueArray;
            };
            ArrayUtils.toAllSubSets = function(array) {
                var op = function(n, sourceArray, currentArray, allSubSets) {
                    if (n === 0) {
                        if (currentArray.length > 0) {
                            allSubSets[allSubSets.length] = ArrayUtils.toStringSet(currentArray);
                        }
                    } else {
                        for (var j = 0; j < sourceArray.length; j++) {
                            var nextN = n - 1,
                                nextArray = sourceArray.slice(j + 1),
                                updatedCurrentSubSet = currentArray.concat([sourceArray[j]]);
                            op(nextN, nextArray, updatedCurrentSubSet, allSubSets);
                        }
                    }
                };
                var allSubSets = [];
                array.sort();
                for (var i = 1; i < array.length; i++) {
                    op(i, array, [], allSubSets);
                }
                allSubSets.push(array);
                return ArrayUtils.toArraySet(allSubSets);
            };


            ArrayUtils.toFixedSizeJoinedSets = function(itemSets, length) {
                //链接操作，此部只是遍历并判断其两项之间是否有差异，如果有的话则合并两项并掉用toStringSet方法去除相同项，生成链接joinedSet
                //此处可以实现第二步链接操作优化

                var joinedSetArray = [];
                // itemSets.forEach(function(itemSetA) {
                //     itemSets.forEach(function(itemSetB) {
                //         if (ArrayUtils.getDiffArray(itemSetA, itemSetB).length > 0) {
                //             var mergedArray = [].concat(itemSetA).concat(itemSetB),
                //                 joinedSet = ArrayUtils.toStringSet(mergedArray);
                //             if (joinedSet.length === length)
                //                 joinedSetArray.push(joinedSet);
                //         }
                //     });
                // });

                //only bind after
                // for(var i = 0, lenI = itemSets.length; i < lenI; i++){
                //     var itemSetA = itemSets[i];
                //     var iLastItem = itemSetA[itemSetA.length -1 ];
                //     for(var j =  i + 1, lenJ = itemSets.length; j < lenJ; j++){
                //         var itemSetB = itemSets[j];
                //         var lastArray = [];
                //         var jLastItem = itemSetB[itemSetB.length - 1];
                //         if(iLastItem < jLastItem){
                //             lastArray.push(jLastItem);
                //             var mergedArray = [].concat(itemSetA).concat(lastArray);
                //             if(mergedArray.length === length){
                //                 joinedSetArray.push(mergedArray);
                //             }
                //         }
                //     }
                // }

                
                var mergedArray = [];
                console.log( itemSets,"origin itemSets");
                for(var i = 0; i < itemSets.length; i++){
                    var rowsItem = itemSets[i];
                    mergedArray = mergedArray.concat(rowsItem);
                }
                console.log(mergedArray, "mergedArray");
                //get uniq
                var oneItemArray = _.uniq(mergedArray);
                var calcutedItems = [];
                var itemCountLowerLength = [];
                for(var j = 0; j < oneItemArray.length; j++){
                    var count = 0;
                    for(var k = 0 ; k < mergedArray.length; k++){
                        if(oneItemArray[j] ===  mergedArray[k]){
                            count += 1;
                        }
                    }
                    var singleCalcutedItems = {
                        itemSet: oneItemArray[j].toString(),
                        count: count
                    }
                    if(count >= length -1){
                        calcutedItems.push(singleCalcutedItems);
                    }
                    else{
                        itemCountLowerLength.push(oneItemArray[j].toString());
                    }
                }

                console.log(oneItemArray, 'oneItemArray', calcutedItems, "calcutedItems");
                //clear data form itemSets
                // console.log( itemSets, "itemSets")
                console.log(itemCountLowerLength, "itemCountLowerLength");

                for(var f = 0 ; f < itemSets.length; f++){
                    for (var l = 0; l < itemCountLowerLength.length; l++) {
                        // console.log(itemSets[f], 'hahahahfuck');
                        // console.log(itemCountLowerLength[l], "itemCountLowerLength");
                        if(!itemSets[f]){
                            break;
                        }
                        var index = itemSets[f].indexOf(itemCountLowerLength[l].toString());
                        console.log(itemSets,itemSets[f],itemCountLowerLength[l].toString(),itemSets.length, index, f, "==========start");
                        if(index !== -1){
                            itemSets.splice(f, 1);
                        }
                        console.log(itemSets,itemSets.length, "==========end");
                    };
                }

                console.log(itemSets, "clear itemSets");
                //get create joinedsetArray

                for(var s = 0; s < itemSets.length; s++){
                    var itemSetA = itemSets[s];
                    var iLastItem = itemSetA[itemSetA.length -1 ];
                    // console.log(calcutedItems, "calcutedItems");
                    if(calcutedItems.length === 0){
                        break;
                    }
                    for(var q = 0; q < calcutedItems.length; q++){
                        var itemSetB = calcutedItems[q].itemSet;
                        // console.log( "itemSetA", itemSetA, iLastItem, itemSetB, itemSetB[0]);

                        if(iLastItem < itemSetB[0]){
                            var mergedArray = [].concat(itemSetA).concat(itemSetB);
                            if(mergedArray.length === length){
                                joinedSetArray.push(mergedArray);
                            }
                        }
                    }
                }
                console.log(joinedSetArray, "joinedSetArray");

                //如果链接后的集合的k－1子集不是频繁的话，则剔除掉
                if(length > 2){
                    for (var e = 0; e < joinedSetArray.length; e++) {
                        var sunKItemSetsNum = Combinatorics.combination(joinedSetArray[e], joinedSetArray[e].length -1);
                        var sunKItemSets =  sunKItemSetsNum.toArray();
                        var containFlag = false;
                        for(var h = 0; h < sunKItemSets.length; h++){
                            // if(itemSets.indexOf(sunKItemSets[h]) === -1){
                            //     console.log('fuck go to here', sunKItemSets[h], "itemSets", itemSets);
                            //     removeFlag = true;
                            // }
                            for(var hh = 0 ; hh < itemSets.length; hh++){
                                if(itemSets[hh].toString() === sunKItemSets[h].toString()){
                                    containFlag = true;
                                    // break;
                                }
                            }
                        }
                        console.log(joinedSetArray, joinedSetArray.length, "joinedSetArray ahahahahahahahah", e, containFlag);
                        if(!containFlag){
                            joinedSetArray.splice(e,1);
                        }
                        console.log(joinedSetArray, joinedSetArray.length, "joinedSetArray ahahahahahahahah", e);
                    };
                }
                return joinedSetArray;
                // return ArrayUtils.toArraySet(joinedSetArray);
            };

            //判断其子集是否是频繁集
            ArrayUtils.isSubSetArrayOf = function(targetArray, superSetArray) {
                var isSubSetArray = true;
                targetArray.forEach(function(item) {
                    if (isSubSetArray && superSetArray.indexOf(item) === -1)
                        isSubSetArray = false;
                });
                return isSubSetArray;
            };

            ArrayUtils.getDiffArray = function(arrayA, arrayB) {
                var diffArray = [];
                arrayA.forEach(function(e) {
                    if (arrayB.indexOf(e) === -1)
                        diffArray.push(e);
                });
                return diffArray;
            };
            ArrayUtils.readCSVToArray = function(inputString, delimiter) {
                delimiter = delimiter || ',';
                var regexp = new RegExp(("(\\" + delimiter + "|\\r?\\n|\\r|^)" + "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" + "([^\"\\" + delimiter + "\\r\\n]*))"), 'gi');

                var arrayOfRows = [
                    []
                ];
                var matched;
                while (!!(matched = regexp.exec(inputString))) {
                    var matchedDelimiter = matched[1];
                    if (matchedDelimiter.length && matchedDelimiter !== delimiter) {
                        arrayOfRows.push([]);
                    }
                    var matchedValue = matched[2] ? matched[2].replace(new RegExp('""', 'g'), '"') : matched[3];
                    if (matchedValue.length > 0) {
                        arrayOfRows[arrayOfRows.length - 1].push(matchedValue);
                    }
                }
                return arrayOfRows;
            };
            return ArrayUtils;
        })();
        Apriori.ArrayUtils = ArrayUtils;
    })(Apriori || (Apriori = {}));
    //# sourceMappingURL=apriori.js.map


    return Apriori;

}));
